<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>flow</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <style>
        /* styles.css */
        .card {
            position: absolute;
            width: 200px;
            height: max-content;
            background-color: #f0f0f0;
            border: 1px solid #ccc;
            padding: 10px;
            border-radius: 5px;
            cursor: move;
        }

        .connector {
            position: absolute;
            border: 2px solid #000;
        }
    </style>
</head>

<body>
    <h1>Flow Creation</h1>
    <div id="cardContainer">
        <!-- Cards will be dynamically added here -->
    </div>
    <div id="connectorContainer"></div>
    <div class="d-flex flex-row mt-5">
        <button type="button" onclick="addCard()" class="btn btn-success me-2">Add Step</button>
        <button type="submit" class="btn btn-dark">Save Flow</button>
    </div>

    

    <script src="https://cdn.jsdelivr.net/npm/interactjs/dist/interact.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jsPlumb/2.15.8/js/jsplumb.min.js"></script>


    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"></script>
    <!-- <script>
        // script.js
        let cardCount = 0;


        

        // <h3>Step ${++cardCount}</h3>
        // <label for="stepName${cardCount}">Step Name:</label>
        // <input type="text" id="stepName${cardCount}" name="stepName${cardCount}">
        // <label for="description${cardCount}">Description:</label>
        // <textarea id="description${cardCount}" name="description${cardCount}"></textarea>
        // <div class="card-actions">
        //     <button onclick="deleteCard(this)" class="btn btn-danger">Delete</button>
        // </div>


        function addCard(parentId) {
    const cardContainer = document.getElementById('cardContainer');
    const card = document.createElement('div');
    card.classList.add('card');
    const cardId = `card${cardCount++}`;
    card.id = cardId;
    card.innerHTML = `
        <h3>Step ${cardCount}</h3>
        <button onclick="deleteCard('${cardId}')" class="btn btn-danger">Delete</button>
    `;
    cardContainer.appendChild(card);

    // Make the newly created card draggable
    interact(card).draggable({
        inertia: true,
        autoScroll: true,
        onmove: dragMoveListener
    });

    // If parent ID is provided, connect the new card to its parent
    if (parentId) {
        connectCards(parentId, cardId);
    }
}

const jsPlumbInstance = jsPlumb.getInstance();
jsPlumbInstance.setContainer(document.getElementById('connectorContainer'));


// Function to connect parent and child cards
function connectCards(parentId, childId) {
    jsPlumbInstance.connect({
        source: parentId,
        target: childId,
        anchors: ['Right', 'Left'],
        endpoint: 'Blank',
        paintStyle: { stroke: '#000', strokeWidth: 2 },
        connector: ['Flowchart', { stub: [40, 60], cornerRadius: 5, alwaysRespectStubs: true }],
        overlays: [
            ['Arrow', { width: 12, length: 12, location: 1, id: 'arrow', foldback: 0.8 }]
        ]
    });
}


// Function to delete a card
function deleteCard(cardId) {
    const card = document.getElementById(cardId);
    jsPlumbInstance.removeAllEndpoints(card);
    card.remove();
}





        document.getElementById('flowForm').addEventListener('submit', function (event) {
            event.preventDefault();
            const formData = new FormData(this);
            const steps = [];
            for (let i = 1; i <= cardCount; i++) {
                const stepName = formData.get(`stepName${i}`);
                const description = formData.get(`description${i}`);
                steps.push({ stepName, description });
            }
            console.log(steps);
        });



        let connectionId = 1;

        function dragMoveListener(event) {
            const target = event.target;
            const x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx;
            const y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

            target.style.transform = `translate(${x}px, ${y}px)`;
            target.setAttribute('data-x', x);
            target.setAttribute('data-y', y);
        }

        interact('#cardContainer').dropzone({
            ondropactivate: function (event) {
                event.target.classList.add('drop-active');
            },
            ondragenter: function (event) {
                event.relatedTarget.classList.add('drag-enter');
            },
            ondragleave: function (event) {
                event.relatedTarget.classList.remove('drag-enter');
            },
            ondrop: function (event) {
                event.relatedTarget.classList.remove('drag-enter');
            },
            ondropdeactivate: function (event) {
                event.target.classList.remove('drop-active');
            }
        });

        interact('.connector').draggable({
            onmove: function (event) {
                const target = event.target;
                const x = parseFloat(target.getAttribute('data-x')) || 0;
                const y = parseFloat(target.getAttribute('data-y')) || 0;

                target.style.transform = `translate(${x}px, ${y}px)`;
                target.setAttribute('data-x', x);
                target.setAttribute('data-y', y);

                jsPlumbInstance.repaintEverything();
            }
        });

        jsPlumbInstance.setContainer(document.getElementById('connectorContainer'));

        function connectCards(sourceId, targetId) {
            jsPlumbInstance.connect({
                source: sourceId,
                target: targetId,
                anchors: ['Right', 'Left'],
                paintStyle: { stroke: '#000', strokeWidth: 2 }
            });
        }

        document.getElementById('cardContainer').addEventListener('drop', function (event) {
            const card = event.relatedTarget;
            card.style.position = 'absolute';

            const x = parseFloat(card.getAttribute('data-x')) || 0;
            const y = parseFloat(card.getAttribute('data-y')) || 0;

            card.style.left = `${event.pageX - x}px`;
            card.style.top = `${event.pageY - y}px`;

            const connector = document.createElement('div');
            connector.classList.add('connector');
            connector.setAttribute('id', `connector${connectionId++}`);
            document.getElementById('connectorContainer').appendChild(connector);

            interact('.connector').draggable({
                onmove: function (event) {
                    const target = event.target;
                    const x = parseFloat(target.getAttribute('data-x')) || 0;
                    const y = parseFloat(target.getAttribute('data-y')) || 0;

                    target.style.transform = `translate(${x}px, ${y}px)`;
                    target.setAttribute('data-x', x);
                    target.setAttribute('data-y', y);

                    jsPlumbInstance.repaintEverything();
                }
            });

            connectCards(card.id, connector.id);
        });

    </script> -->

    <script>
        let cardCount = 0;

        // Initialize jsPlumb
const jsPlumbInstance = jsPlumb.getInstance();
jsPlumbInstance.setContainer(document.getElementById('connectorContainer'));

// Initialize drag and drop for cards
document.querySelectorAll('.card').forEach(card => {
    interact(card).draggable({
        inertia: true,
        autoScroll: true,
        onmove: dragMoveListener
    });
});

// Function to add a new card
function addCard() {
    const cardContainer = document.getElementById('cardContainer');
    const card = document.createElement('div');
    const cardId = `card${cardCount++}`;
    card.classList.add('card');
    card.id = cardId;
    card.innerHTML = `
        <h3>Step ${cardCount}</h3>
        <button onclick="deleteCard('${cardId}')" class="btn btn-danger">Delete</button>
    `;
    cardContainer.appendChild(card);

    // Make the newly created card draggable
    interact(card).draggable({
        inertia: true,
        autoScroll: true,
        onmove: dragMoveListener
    });

    // Make the card a drop target
    jsPlumbInstance.makeTarget(card, {
        anchor: 'Continuous',
        endpoint: 'Blank',
        allowLoopback: false
    });
}

// Function to delete a card
function deleteCard(cardId) {
    const card = document.getElementById(cardId);
    jsPlumbInstance.remove(card);
    card.remove();
}

// Function to handle drag movement
function dragMoveListener(event) {
    const target = event.target;
    const x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx;
    const y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

    target.style.transform = `translate(${x}px, ${y}px)`;
    target.setAttribute('data-x', x);
    target.setAttribute('data-y', y);
}

// Initialize connection functionality
jsPlumbInstance.bind('connection', function (info) {
    info.connection.getOverlay('label').setLabel('Connection');
});

// Initialize the connection between cards
jsPlumbInstance.draggable(document.querySelectorAll('.card'), {
    containment: 'parent'
});

    </script>
</body>

</html>